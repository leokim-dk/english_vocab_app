import { supabase } from '@/lib/supabase';

// SQL for creating the vocabulary table if it doesn't exist
const createVocabularyTableSQL = `
-- 어휘 테이블
CREATE TABLE IF NOT EXISTS vocabulary (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  english TEXT NOT NULL,
  korean TEXT NOT NULL,
  favorite BOOLEAN DEFAULT FALSE,
  last_reviewed TIMESTAMP WITH TIME ZONE,
  review_count INTEGER DEFAULT 0
);

-- 공개 테이블 접근 정책
ALTER TABLE vocabulary ENABLE ROW LEVEL SECURITY;

-- RLS 정책이 이미 있는지 확인 후 생성 (중복 방지)
DO
$$
BEGIN
  -- 사용자는 자신의 단어만 볼 수 있음
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'vocabulary' AND policyname = 'Users can view own vocabulary'
  ) THEN
    CREATE POLICY "Users can view own vocabulary" ON vocabulary FOR SELECT USING (auth.uid() = user_id);
  END IF;

  -- 사용자는 자신의 단어만 추가할 수 있음
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'vocabulary' AND policyname = 'Users can insert own vocabulary'
  ) THEN
    CREATE POLICY "Users can insert own vocabulary" ON vocabulary FOR INSERT WITH CHECK (auth.uid() = user_id);
  END IF;

  -- 사용자는 자신의 단어만 업데이트할 수 있음
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'vocabulary' AND policyname = 'Users can update own vocabulary'
  ) THEN
    CREATE POLICY "Users can update own vocabulary" ON vocabulary FOR UPDATE USING (auth.uid() = user_id);
  END IF;

  -- 사용자는 자신의 단어만 삭제할 수 있음
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'vocabulary' AND policyname = 'Users can delete own vocabulary'
  ) THEN
    CREATE POLICY "Users can delete own vocabulary" ON vocabulary FOR DELETE USING (auth.uid() = user_id);
  END IF;
END
$$;
`;

/**
 * Initializes the database by creating necessary tables and policies
 * This should be called when the application starts
 */
export async function initializeDatabase() {
  try {
    // Execute the SQL to create tables and policies
    const { error } = await supabase.rpc('exec_sql', { sql: createVocabularyTableSQL });
    
    if (error) {
      console.error('Error initializing database:', error);
      // For administrators only - attempt to create table directly if RPC fails
      try {
        const { error: tableError } = await supabase.from('vocabulary').select('id').limit(1);
        
        if (tableError && tableError.message.includes('relation "public.vocabulary" does not exist')) {
          console.log('The vocabulary table needs to be created. Please run the setup SQL manually in Supabase dashboard.');
        }
      } catch (err) {
        console.error('Error checking table existence:', err);
      }
      return false;
    }
    
    console.log('Database initialization completed successfully');
    return true;
  } catch (error) {
    console.error('Error in database initialization:', error);
    return false;
  }
} 